// Defining Schema
const studentSchema = mongoose.schema({name: String})

// Compiling Schema
const Student = mongoose.model("Student", studentSchema)

// Creating Document
const studentDoc = new Student({
    name: "Sonam"
})

// Saving Document
await studentDoc.save()

# save() => It is used to save document by inserting a new document into the database if document.isNew is true, or sends an updateOne operation only with modifications to the database, it does not replace the whole document in the latter case.

It returns undefined if used with callback or a Promise otherwise.

eg: 
studentDoc.save((err, result) => {
    if(err){
        console.log(err)
    }else{
        console.log(result)
    }
})

or 

const result = await studentDoc.save()
console.log(result)

// for multipleDocs
    const result = await teacherModel.insertMany([teacherDoc, studentDoc]);


Mongoose validates modified paths before saving. If you set a field to an invalid value, Mongoose will throw an error when you try to save() that document.

if we don't want mongoose to validate beforing saving data => 

const result = await studentDoc.save({
    validateBeforeSave: false
})

