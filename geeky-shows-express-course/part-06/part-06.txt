# ROUTING =>
    * Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URL (or path) and a specific HTTP request method (GET, POST, and so on).
    * Each route can have one or more callback functionos, which are executed when the route is matched.
    syntax:- app.method(path, callback)

    app.method(path, [callback1, callback2, ...])

    app.method(path, [callback1, callback2, ...], callback)

        * app is an instance of express.
        * method is a HTTP request method such as GET, POST, PUT, DELETE, etc in lowercase.
        * path is a path on the server.
        * callback is the function executed when the route is matched.

        eg:-
            const app = express()
            app.get("/", function(req, res){
                res.send("Hello World")
            })

            app.post("/", (req, res) => {
              res.send("Hello World")
            })


syntax:- app.method(path, callback)

* Methods =>
    * GET: Retrieve data.
    * POST: Create/Insert data.
    * PUT: Complete Update data.
    * PATCH: Partially Update data.
    * DELETE: Delete data.
    * ALL: Any HTTP request method.

syntax:- app.method(path, callback)

example:-
app.get("student/all", callback)

app.post("/student/create", callback)

app.put("/student/update", callback)

app.delete("student/delete", callback)

app.all(path, [callback1, callback2, ...], callback) => 
    This method is like the standard app.METHOD() methods, except it matches all HTTP verbs.

    This method is useful for mapping "global" logic for specific path prefixes or arbitrary matches.

    eg:-
    app.all("/all", (req, res, next) => {
        console.log("This is a global logic for all the routes, Accessing the secret section...");
        next() //pass control to the next callback
    })

    // requireAuthentication is a callback

    app.all("*", requireAuthentication, loadUser)

    app.all("/api/*", requireAuthentication)

Syntax:- app.method(path, callback)

Path- Route paths can be strings, string patterns, or regular expressions, Query strings are not part of the route path.

The characters ?, +, *, and () are subsets of their regular expression counterparts.

The hyphen (-) and the dot (.) are interpreted literally by string-baset paths.

If you need to use the dollar character ($) in a path string, enclose it escaped within ([ and ])

eg: -

wwww.geekyshows.com/data/$book

app.get("/data/([\$])book", callback)


# CALLBACK =>
    Route callbacks can be in the form of a function, an array of functions, or combinations of both.

    you can provide multiple callback functions that behave like middleware to handle a request. The only exception is that these callbacks might invoke next("route") to bypass the remaining route callbacks.

    example:-

    req => The requrest object
    res => The response object
    next => It is indicating the next middleware function.

    app.get("/cbexample1", (req, res) => {
        res.send("One callback example")
    })

# MORE THAN ONE CALLBACK FUNCTIONS =>

    app.get("/cbexample2", (req, res, next) => {
        console.log("first callback")
        next()
    }, (req, res) => {
        console.log("second callback")
        res.send("More than one callback example")
    })

# AN ARRAY OF CALLBACK FUNCTIONS

const cb1 = (req, res, next) => {
    console.log("first callback")
    next()
}

const cb2 = (req, res, next) => {
    console.log("Second callback")
    next()
}

const cb3 = (req, res) => {
    console.log("Third callback")
    res.send("An array of callback")
}

app.get("/cbexample3", [cb1, cb2, cb3])

# COMBINATION OF INDEPENDENT FUNCTIONS AND ARRAYS OF FUNCTIONS =>

const cb1 = (req, res, next) => {
    console.log("first callback")
    next()
}

const cb2 = (req, res, next) => {
    console.log("Second callback")
    next()
}

app.get("/cbexample4", [cb1, cb2], (req, res, next) => {
    console.log("Third callback")
    next()
}, (req, res) => {
    console.log("Fourth callback")
    res.send("Combination of Independent function and array of functions")
})