# MIDDLEWARE => 

Middle ware funcitons are functions that have access to the request object(req), the response object(res), and the next function in the application's request-response cycle.

The next function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.

Middleware funcitons can perform the following tasks:
    * Execute any code.
    * Make changes to the request and the response objects.
    * End the request-response cycle.
    * Call the next middleware in the stack.

# CREATING MIDDLEWARE =>

app.js =>

    // this function is a middleware
    app.use(function(req,res, next){
        console.log("logged")
        next()
    })

    routes/student.js
    router.use(function(req,res, next){
        console.log("logged")
        next()
    })

// well maintained code for middleware
middlewares/logger-middleware.js
    var myLogger = function(req, res, next){
        console.log("logged")
        next()
    }
app.js => 
import myLogger from "middlewares/logger-middleware.js"
app.use(myLogger)

# USING MIDDLEWARE =>

    i. Application level middleware.
    ii. Rouer level middleware.

i. Application level middleware => Bind application level middlware to an instance of the app object by using the app.use() and app.METHOD() functions, where METHOD is the HTTP method of the request that the middleware function handles (such as GET, PUT, or POST) in lowercase.

A middleware function with no mount path. The function is executed every time the app receives a request.

app.use(function(req,res, next){
        console.log("logged")
        next()
    })

we can use multiple middlewares =>
app.use(function(req,res, next){
        console.log("logged")
        next()
    },function(req,res, next){
        console.log("logged")
        next()
    })
// well maintained code for middleware
middlewares/logger-middleware.js
    var myLogger = function(req, res, next){
        console.log("logged")
        next()
    }
app.js => 
import myLogger from "middlewares/logger-middleware.js"
app.use(myLogger)

A middleware function mounted on the /about path. The function is executed for any type of HTTP request on the /about path.

app.use("/about", function(req, res, next){
    console.log("logged")
    next()
})
we can use multiple middlewares =>
app.use(function(req,res, next){
        console.log("logged")
        next()
    },function(req,res, next){
        console.log("logged")
        next()
    })
// well maintained code for middleware
middlewares/logger-middleware.js
    var myLogger = function(req, res, next){
        console.log("logged")
        next()
    }
app.js => 
import myLogger from "middlewares/logger-middleware.js"
app.use(myLogger)

# ROUTER LEVEL MIDDLEWARE =>

    Router-level middleware works in the same way as application-level-middleware, except it is bound to an instance of express.Router();

    A middleware funciton with no mounth path. The function is executed every time the app receives a request.

    router.use((req, res, next) => {
        console.log("Logged")
        next()
    })

    we can use multiple middlewares =>
    
    router.use((req, res, next) => {
        console.log("Logged")
        next()
    }, (req, res, next) => {
        console.log("Logged")
        next()
    } )

// well maintained code for middleware
middlewares/logger-middleware.js
    var myLogger = function(req, res, next){
        console.log("logged")
        next()
    }
routers/web.js => 
import myLogger from "middlewares/logger-middleware.js"
router.use(myLogger)

A middleware function mounted on the /student path. The function is executed for any type of HTTP request on the /student path.

router.use("/student", function (req, res, next){
    console.log("Logged")
    next()
})

 we can use multiple middlewares =>
    
    router.use("/student", (req, res, next) => {
        console.log("Logged 1")
        next()
    }, (req, res, next) => {
        console.log("Logged 2")
        next()
    } )

// well maintained code for middleware
middlewares/logger-middleware.js
    var myLogger = function(req, res, next){
        console.log("logged")
        next()
    }
routers/web.js => 
import myLogger from "middlewares/logger-middleware.js"
router.use("/student", myLogger)

# BUILT IN MIDDLEWARE

* express.static: Serves static assets such as HTML files, images, and so on.
* express.json: parses incoming requests with JSON payloads.
* express.urlencoded: parses incoming requests with URL-encoded payloads.

# THIRD PARTY MIDDLEWARE => 

Use third-party middleware to add functionallity to Express apps.

npm install cookie-parser

import cookieParser from ("cookie-parser")
// load the cookie-parsing middleware

app.use(cookieParser)